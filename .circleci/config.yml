version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}


# Declare jobs
jobs:
  create_infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Stack
            command: |
              aws cloudformation deploy \
                --template-file ec2-infra.yml \
                --stack-name prod-${CIRCLE_WORKFLOW_ID}
        - run: return 1
        - run:
            name: Destroy environment
            command: |
              aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
            when: on_fail

  create_infrastructure_2:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            aws cloudformation deploy --template-body ec2-infra.yml --stack-name cicd-basics

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["95:cc:4a:2a:56:ac:93:91:3c:49:09:0d:83:d1:8e:b5"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory playbook.yml

  create_and_deploy_front_end:
    docker:
        - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Deploy front-end
            command: |
              aws cloudformation deploy \
                --template-file bucket-infra.yml \
                --stack-name "${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run: aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID:0:7}" --delete
        - run: 
            name: Clean-up stack
            command: |
              aws s3 rm "s3://${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name "${CIRCLE_WORKFLOW_ID:0:7}"
            when: on_fail

  get_last_deployment_id:
    docker:
        - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Install tar utility
            command: |
              yum install -y tar gzip
        - run:
            name: Get last deployment id
            command: |
              aws cloudformation \
                list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
                --no-paginate --output text > last-deployment-id.txt
        - persist_to_workspace:
              root: ~/
              paths: 
                  - last-deployment-id.txt

  promote_to_production:
    docker:
        - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Promote to production
            command: |
              aws cloudformation deploy \
                --template-file cloudfront-infra.yml \
                --stack-name production-distro \
                --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"

  clean_up_old_front_end:
    docker:
        - image: amazon/aws-cli
    steps:
        - checkout
        - attach_workspace:
              at: ~/
        - run:
            name: Clean-up old front-end
            command: |
              PreviousPipelineID=`cat ~/last-deployment-id.txt`
              OldPipelineID="cicd-basics-udacity"
              aws s3 rm "s3://${OldPipelineID}" --recursive
              aws cloudformation delete-stack --stack-name "${PreviousPipelineID}"              
              

workflows:
  infra:
    jobs:
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
              - create_and_deploy_front_end
      - promote_to_production:
          requires:
              - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
              - promote_to_production
